install.packages("zoo")
install.packages("knitr")
install.packages("installr")
library(installr)
update(R)
updateR()
library(zoo)
getwd()
str(iris)
setwd("d:/Study/R")
getwd
getwd()
iris <- ("data_iris.csv", header=TRUE, stingAsFactors=FALSE)
iris <- read.csv("data_iris.csv")
iris <- read.csv("data_irsi.csv", header = TRUE, stringsAsFactors = FALSE)
iris <- read.csv("data_iris.csv", header = TRUE, stringsAsFactors = FALSE)
str(ris)
head(iris)
tail(iris)
?hread()
?head()
head(iris, 10)
tail(iris, 8)
iris <- read.csv("data_iris.csv")
iris <- read.csv("data_irsi.csv", header = TRUE, stringsAsFactors = FALSE)
iris <- read.csv("data_iris.csv", header = TRUE, stringsAsFactors = FALSE)
table(iris$Species)
str(iris)
str(Species)
iris$Species <-as.factor(iris$Species)
str(iris$Species)
iris$Species <- factor(iris$Species, order = TRUE, level = c("setosa", "versinica","versicolor"))
str(iris$Species)
class(iris$Species)
levels(iris$Species)
str(iris$Species)
Sys.time()
a="2017-05-01 10-12-30"
b="2017-05-01 13-33-48"
c=strptime(a, "%Y-%m-%d %H-%M-%S")
d=strptime(b, "%Y-%m-%d %H-%M-%S")
difftime(c,d)
e=as.numeric(difftime(c,d))*3600
e
iris
str(iris)
head(iris)
iris[c(110, 123:128), c(1, 4)]
install.packages("sqldf")
install.packages("sqldf")
install.packages("sqldf")
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
install.packages("dplyr")
library(dpylr)
library(dplyr)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Patal,Width, Species Variables), Sepal.Length>7 & Patal.Width<=2)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Patal.Width, Species Variables), Sepal.Length>7 & Patal.Width<=2)
head(iris)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Petal,Width, Species Variables), Sepal.Length>7 & Patal.Width<=2)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Petal,Width, Species Variables), Sepal.Length>7 & Petal.Width<=2)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Petal,Width, Species), Sepal.Length>7 & Petal.Width<=2)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Petal.Width, Species), Sepal.Length>7 & Petal.Width<=2)
test <- subset(iris, select = c(110, 123:128), select=c(Sepal.Length, Petal.Width, Species), Sepal.Length>7 & Petal.Width<=2)
test <- iris %>%
select(c(epal.Length, Petal.Width, Species)) %>%
filter(Sepal.Length>7 & Petal.Width<=2)
filter(Sepal.Length>7 & Petal.Width<=2)
test <- iris %>%
+         select(c(Sepal.Length, Petal.Width, Species)) %>%
+         filter(Sepal.Length>7 & Petal.Width<=2)
test <- iris %>%select(c(Sepal.Length, Petal.Width, Species)) %>%
+         filter(Sepal.Length>7 & Petal.Width<=2)
iris$SL2 <- itself(iris$Sepal.Length >=5.1, "up", "down")
iris$SL2 <- itelse(iris$Sepal.Length >=5.1, "up", "down")
iris$SL2 <- ifelse(iris$Sepal.Length >=5.1, "up", "down")
iris
for(i in 1: length(iris)) {}
for(i in 1: length(iris)) { if(Sepal.Length(i) > 5.i) Sepal.Length(i)=up }
iris <- ("data_iris.csv", header=TRUE, stingAsFactors=FALSE)
iris <- ("data_iris.csv", header=TRUE, stingAsFactors=FALSE)
getwd()
iris <- read.csv("data_iris.csv", header=TRUE, stingAsFactors=FALSE)
iris <- read.csv("data_iris.csv")
iris
?ddply
??ddply
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=(Petal.Length), PL_max=(Petal.Length), PL_min=(Petal_Length))
library(dplyr)
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=(Petal.Length), PL_max=(Petal.Length), PL_min=(Petal_Length))
library(plyr)
install.packages("dplyr")
install.packages("plyr")
library(plyr)
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=(Petal.Length), PL_max=(Petal.Length), PL_min=(Petal_Length))
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=(Petal.Length), PL_max=(Petal.Length), PL_min=(Petal.Length))
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=sd(Petal.Length), PL_max=max(Petal.Length), PL_min=min(Petal_Length))
ddply_pl = ddply(iris, "Species", summarise, PL_mean = mean(Petal.Length), PL_sd=sd(Petal.Length), PL_max=max(Petal.Length), PL_min=min(Petal.Length))
ddplyr_pl
ddply_pl
?ddply
ls()
gc()
ls()
rm(1)
rm(a)
ls()
rm(lisr=ls())
rm(list=ls())
gc()
head(iris)
data("iris")
data(iris)
head(iris)
View(iris)
str(iris)
dir(iris)
dim(iris)
nrow(iris)
ncol(iris)
length(iris)
boxplot(iris)
summary(iris)
plot(iris)
install.packages("GGally")
library(GGally)
ggscatmat(iris, columns = 1:4, color = "Species")
coplot(Sepal.Length ~ Sepal.Width | Species, data=iris, row=1)
coplot(Pepal.Length ~ Pepal.Width | Species, data=iris, row=1)
coplot(Petal.Length ~ Petal.Width | Species, data=iris, row=1)
library("reshape2", lib.loc="C:/Program Files/R/R-3.3.3/library")
install.packages("reshape2")
detach("package:reshape2", unload=TRUE)
library(reshape2)
iris_melt <- melt(iris, id="Species")
head(iris_melt)
view(iris_melt)
View(iris_melt)
iris_div <- ddply(iris_melt, .(Species, variables), summarise, iris_mean = mean(value), iris_sd=sd(value), iris_coeff = iris_sd/iris_mean, iris_iqr = IQR(value), iris_rng=max(value)-min(value))
library(plyr)
iris_div <- ddply(iris_melt, .(Species, variables), summarise, iris_mean = mean(value), iris_sd=sd(value), iris_coeff = iris_sd/iris_mean, iris_iqr = IQR(value), iris_rng=max(value)-min(value))
iris_div <- ddply(iris_melt, .(Species, variable), summarise, iris_mean = mean(value), iris_sd=sd(value), iris_coeff = iris_sd/iris_mean, iris_iqr = IQR(value), iris_rng=max(value)-min(value))
head(iris_div)
library(ggplot2)
ggplot(iris_div, ase(x=Species, y=iris_coeff, fill-Species)) + geom_bar(stat="identity") + facet_wrap(~variable) + theme_bw() + labs(title-'IRIS EDA', subtitle='Divergence Tendency - coeff(sd/mean)')
ggplot(iris_div, aes(x=Species, y=iris_coeff, fill-Species)) + geom_bar(stat="identity") + facet_wrap(~variable) + theme_bw() + labs(title-'IRIS EDA', subtitle='Divergence Tendency - coeff(sd/mean)')
ggplot(iris_div, aes(x=Species, y=iris_coeff, fill-Species)) + geom_bar(stat="identity") + facet_wrap(~variable) + theme_bw() + labs(title='IRIS EDA', subtitle='Divergence Tendency - coeff(sd/mean)')
ggplot(iris_div, aes(x=Species, y=iris_coeff, fill=Species)) + geom_bar(stat="identity") + facet_wrap(~variable) + theme_bw() + labs(title='IRIS EDA', subtitle='Divergence Tendency - coeff(sd/mean)')
install.packages("e1071")
library(installr)
a <- available.packages()
head(row.names(a), 3)
summary(a)
source("http://bioconductor.org/biocLite.R")
biocLite()
search()
library(ggplot2)
search()
find.package("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <-5+7
x
y <- x-3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555)
c(z, 555, z)
z *2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z *2 +1000
my_div
getwd()
ls()
x <- 9
ls()
files()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir
old.dir <-getwd()
dir.create(testdir)
?dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
info()
file.path("folder1")
file.path("folder1", "folder2")
list.dirs()
?dir.create
dir.create("testdir2")
dir.creat(file.path("testdir2", "testdir3"), recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq = seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
my_seq
seq_along(my_seq)
rep(0. times=40)
rep(0. times=40 )
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('my', 'name', 'is')
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rapael")
my_name
paste(my_name, collapes=" ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1, 2, 3, c("X","Y", "Z")), sep= "")
paste(1, 2, 3, c("X","Y", "Z"), sep= "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- v(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x *3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na=is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(is.na(my_data))
sum(my_na)
my_data
0/0
Inf-Inf
x <- sample(rnorm(20), rep(NA, 20))
x <- sample(c(rnorm(20), rep(NA, 20)), 20)
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3:7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <-c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_ve
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identcal(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gian", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <-
| data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
?dim
colnames(my_data) <- cnames
my_data
swirl()
install.packages("swirl")
library("swirl")
library(swirl)
rm(list=ls())
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
TRUE == TRUE
(False == TRUE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <=10
5!= 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,
| FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <-sample(10)
ints
ints > 5
which(ints > 7)
any(ints <0 )
all (ints > 10)
all (ints > 0)
Sys.Data()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
submit()
boring_function("Myfirs function!")
boring_function('Myfirs function!')
boring_function('Myfirst function!')
boring_function('My first function!')
boring_function
mean
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainer)
args(remainder)
submit()
submit()
submit()
submit()
?
dl
submit()
submit()
submit()
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evlauate(sum, c(2, 3, 6))
evaluate(sum, c(2, 3, 6))
ls()
rm(list=ls())
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sum, c(2, 3, 6))
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9. 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){ x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
rm(list=ls())
submit()
telegram <- function(x, y){
paste("START", x, y, "STOP", sep=" ")
}
telegram("good", "morning")
submit()
telegram("Hello", "World")
submit()
mad_libs(place="seoul", adjective="blue", noun="money")
submit()
'love' %p% 'R'
"love" %p% "R!"
'I' %p% 'love' %p% 'R!'
setwd(paste(getwd(), "/", "coursera", sep=""))
getwd()
filepath <- paste(getwd(), "/", "specdata", sep="")
class(filepath)
filename <- as.character(list,files(filepath))
filename <- as.character(list,file(filepath))
filename <- as.character(list.files(filepath))
filename
avg <-c()
avg
tempdata <- read.csv(paste("filepath", "/", filename[1], sep=""), header=TRUE, sep=",")
head(tempdata)
pastes("filepath". "/". finename[1], sep="")
pastes("filepath", "/", finename[1], sep="")
paste("filepath", "/", finename[1], sep="")
filename
filename[1]
paste("filepath", "/", filename[1], sep="")
paste(filepath, "/", filename[1], sep="")
tempdata <- read.csv(paste(filepath, "/", filename[i], sep=""), header=TRUE, sep=",")
tempdata <- read.csv(paste(filepath, "/", filename[1], sep=""), header=TRUE, sep=",")
head[tempfata]
head[tempdata]
tempdata
head
head(tempdata)
na_removed <- tempdata[!is.na(tempdata[, pollutant], pollutant)]
na_removed <- tempdata[!is.na(tempdata[, "sulfate"], "solfate")]
na_removed <- tempdata[!is.na(tempdata[, "sulfate"], "sulfate")]
na_removed <- tempdata[!is.na(tempdata[, "sulfate"]), "sulfate"]
head(na_removed)
mean(na_removed)
avg[i] <- mean(na_removed)
avg[1] <- mean(na_removed)
avg
avg[2] <- mean(na_removed)
avg
tempdata[, "sulfate"]
rm(list=ls())
getwd()
list(files)
list()
